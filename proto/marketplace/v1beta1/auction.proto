syntax = "proto3";
package OmniFlix.marketplace.v1beta1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/OmniFlix/marketplace/x/marketplace/types";
option (gogoproto.goproto_getters_all) = false;


message AuctionListing {
  uint64                    id                   = 1;
  string                    nft_id               = 2 [(gogoproto.moretags) = "yaml:\"nft_id\""];
  string                    denom_id             = 3 [(gogoproto.moretags) = "yaml:\"denom_id\""];
  cosmos.base.v1beta1.Coin  min_price            = 4 [
    (gogoproto.nullable)     = false,
    (gogoproto.moretags)     = "yaml:\"min_price\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];
  google.protobuf.Timestamp start_time           = 5 [
    (gogoproto.stdtime)  = true,
    (gogoproto.moretags) = "yaml:\"start_time\""
  ];
  google.protobuf.Timestamp end_time             = 6 [
    (gogoproto.stdtime)  = true,
    (gogoproto.moretags) = "yaml:\"end_time\""
  ];
  AuctionStatus             status               = 7;
  string                    owner                = 8;
  string                    increment_percentage = 9 [
    (gogoproto.moretags)   = "yaml:\"increment_percentage\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  repeated string           whitelist            = 10 [(gogoproto.nullable) = false];
  repeated WeightedAddress  split_shares         = 11 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"split_shares\""
  ];
}

message WeightedAddress {
  option (gogoproto.equal) = true;

  string address           = 1 [(gogoproto.moretags) = "yaml:\"address\""];
  string weight            = 2 [
    (gogoproto.moretags)   = "yaml:\"weight\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

enum AuctionStatus {

  AUCTION_STATUS_INACTIVE = 0;
  AUCTION_STATUS_ACTIVE   = 1;
  AUCTION_STATUS_ENDED    = 2;
}

message Bid {
  option (gogoproto.equal)             = true;

  uint64                    auction_id = 1 [(gogoproto.moretags) = "yaml:\"auction_id\""];
  string                    bidder     = 2;
  cosmos.base.v1beta1.Coin  amount     = 3 [(gogoproto.nullable) = false];
  google.protobuf.Timestamp time       = 4 [(gogoproto.stdtime) = true];
}